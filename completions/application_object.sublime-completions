{
    "scope": "source.python",
    "completions": [
        {
            "trigger": "flask.Flask(import_name, static_url_path=None, static_folder='static', static_host=None, host_matching=False, template_folder='templates', instance_path=None, instance_relative_config=False, root_path=None)\t flask.Flask",
            "contents": "flask.Flask(${1:import_name}, ${2:static_url_path=None}, ${3:static_folder='static'}, ${4:static_host=None}, ${5:host_matching=False}, ${6:template_folder='templates'}, ${7:instance_path=None}, ${8:instance_relative_config=False}, ${9:root_path=None})$0"
        },
        {
            "trigger": "add_template_filter(f, name=None)\t flask.Flask",
            "contents": "add_template_filter(${1:f}, ${2:name=None})$0"
        },
        {
            "trigger": "add_template_global(f, name=None)\t flask.Flask",
            "contents": "add_template_global(${1:f}, ${2:name=None})$0"
        },
        {
            "trigger": "add_template_test(f, name=None)\t flask.Flask",
            "contents": "add_template_test(${1:f}, ${2:name=None})$0"
        },
        {
            "trigger": "add_url_rule(rule, endpoint=None, view_func=None, provide_automatic_options=None, **options)\t flask.Flask",
            "contents": "add_url_rule(${1:rule}, ${2:endpoint=None}, ${3:view_func=None}, ${4:provide_automatic_options=None}, ${5:**options})$0"
        },
        {
            "trigger": "after_request(f)\t flask.Flask",
            "contents": "after_request(${1:f})$0"
        },
        {
            "trigger": "after_request_funcs = None\t flask.Flask",
            "contents": "after_request_funcs = None$0"
        },
        {
            "trigger": "app_context()\t flask.Flask",
            "contents": "app_context()$0"
        },
        {
            "trigger": "app_ctx_globals_class\t flask.Flask",
            "contents": "app_ctx_globals_class$0"
        },
        {
            "trigger": "auto_find_instance_path()\t flask.Flask",
            "contents": "auto_find_instance_path()$0"
        },
        {
            "trigger": "before_first_request(f)\t flask.Flask",
            "contents": "before_first_request(${1:f})$0"
        },
        {
            "trigger": "before_first_request_funcs = None\t flask.Flask",
            "contents": "before_first_request_funcs = None$0"
        },
        {
            "trigger": "before_request(f)\t flask.Flask",
            "contents": "before_request(${1:f})$0"
        },
        {
            "trigger": "before_request_funcs = None\t flask.Flask",
            "contents": "before_request_funcs = None$0"
        },
        {
            "trigger": "blueprints = None\t flask.Flask",
            "contents": "blueprints = None$0"
        },
        {
            "trigger": "cli = None\t flask.Flask",
            "contents": "cli = None$0"
        },
        {
            "trigger": "config = None\t flask.Flask",
            "contents": "config = None$0"
        },
        {
            "trigger": "config_class\t flask.Flask",
            "contents": "config_class$0"
        },
        {
            "trigger": "context_processor(f)\t flask.Flask",
            "contents": "context_processor(${1:f})$0"
        },
        {
            "trigger": "create_global_jinja_loader()\t flask.Flask",
            "contents": "create_global_jinja_loader()$0"
        },
        {
            "trigger": "create_jinja_environment()\t flask.Flask",
            "contents": "create_jinja_environment()$0"
        },
        {
            "trigger": "create_url_adapter(request)\t flask.Flask",
            "contents": "create_url_adapter(${1:request})$0"
        },
        {
            "trigger": "debug\t flask.Flask",
            "contents": "debug$0"
        },
        {
            "trigger": "default_config = ImmutableDict({'JSON_AS_ASCII': True, 'USE_X_SENDFILE': False, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_NAME': 'session', 'DEBUG': False, 'PROPAGATE_EXCEPTIONS': None, 'SESSION_COOKIE_SECURE': False, 'SECRET_KEY': None, 'EXPLAIN_TEMPLATE_LOADING': False, 'MAX_CONTENT_LENGTH': None, 'APPLICATION_ROOT': '/', 'SERVER_NAME': None, 'PREFERRED_URL_SCHEME': 'http', 'JSONIFY_PRETTYPRINT_REGULAR': False, 'TESTING': False, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'TEMPLATES_AUTO_RELOAD': None, 'TRAP_BAD_REQUEST_ERRORS': None, 'JSON_SORT_KEYS': True, 'JSONIFY_MIMETYPE': 'application/json', 'SESSION_COOKIE_HTTPONLY': True, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'TRAP_HTTP_EXCEPTIONS': False})\t flask.Flask",
            "contents": "default_config = ImmutableDict(${1:\\{'JSON_AS_ASCII': True}, ${2:'USE_X_SENDFILE': False}, ${3:'SESSION_COOKIE_PATH': None}, ${4:'SESSION_COOKIE_DOMAIN': None}, ${5:'SESSION_COOKIE_NAME': 'session'}, ${6:'DEBUG': False}, ${7:'PROPAGATE_EXCEPTIONS': None}, ${8:'SESSION_COOKIE_SECURE': False}, ${9:'SECRET_KEY': None}, ${10:'EXPLAIN_TEMPLATE_LOADING': False}, ${11:'MAX_CONTENT_LENGTH': None}, ${12:'APPLICATION_ROOT': '/'}, ${13:'SERVER_NAME': None}, ${14:'PREFERRED_URL_SCHEME': 'http'}, ${15:'JSONIFY_PRETTYPRINT_REGULAR': False}, ${16:'TESTING': False}, ${17:'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31}), 'TEMPLATES_AUTO_RELOAD': None, 'TRAP_BAD_REQUEST_ERRORS': None, 'JSON_SORT_KEYS': True, 'JSONIFY_MIMETYPE': 'application/json', 'SESSION_COOKIE_HTTPONLY': True, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'TRAP_HTTP_EXCEPTIONS': False})$0"
        },
        {
            "trigger": "dispatch_request()\t flask.Flask",
            "contents": "dispatch_request()$0"
        },
        {
            "trigger": "do_teardown_appcontext(exc=<object object>)\t flask.Flask",
            "contents": "do_teardown_appcontext(${1:exc=<object object>})$0"
        },
        {
            "trigger": "do_teardown_request(exc=<object object>)\t flask.Flask",
            "contents": "do_teardown_request(${1:exc=<object object>})$0"
        },
        {
            "trigger": "endpoint(endpoint)\t flask.Flask",
            "contents": "endpoint(${1:endpoint})$0"
        },
        {
            "trigger": "error_handler_spec = None\t flask.Flask",
            "contents": "error_handler_spec = None$0"
        },
        {
            "trigger": "errorhandler(code_or_exception)\t flask.Flask",
            "contents": "errorhandler(${1:code_or_exception})$0"
        },
        {
            "trigger": "extensions = None\t flask.Flask",
            "contents": "extensions = None$0"
        },
        {
            "trigger": "full_dispatch_request()\t flask.Flask",
            "contents": "full_dispatch_request()$0"
        },
        {
            "trigger": "get_send_file_max_age(filename)\t flask.Flask",
            "contents": "get_send_file_max_age(${1:filename})$0"
        },
        {
            "trigger": "got_first_request\t flask.Flask",
            "contents": "got_first_request$0"
        },
        {
            "trigger": "handle_exception(e)\t flask.Flask",
            "contents": "handle_exception(${1:e})$0"
        },
        {
            "trigger": "handle_http_exception(e)\t flask.Flask",
            "contents": "handle_http_exception(${1:e})$0"
        },
        {
            "trigger": "handle_url_build_error(error, endpoint, values)\t flask.Flask",
            "contents": "handle_url_build_error(${1:error}, ${2:endpoint}, ${3:values})$0"
        },
        {
            "trigger": "handle_user_exception(e)\t flask.Flask",
            "contents": "handle_user_exception(${1:e})$0"
        },
        {
            "trigger": "has_static_folder\t flask.Flask",
            "contents": "has_static_folder$0"
        },
        {
            "trigger": "import_name = None\t flask.Flask",
            "contents": "import_name = None$0"
        },
        {
            "trigger": "inject_url_defaults(endpoint, values)\t flask.Flask",
            "contents": "inject_url_defaults(${1:endpoint}, ${2:values})$0"
        },
        {
            "trigger": "instance_path = None\t flask.Flask",
            "contents": "instance_path = None$0"
        },
        {
            "trigger": "iter_blueprints()\t flask.Flask",
            "contents": "iter_blueprints()$0"
        },
        {
            "trigger": "jinja_env\t flask.Flask",
            "contents": "jinja_env$0"
        },
        {
            "trigger": "jinja_environment\t flask.Flask",
            "contents": "jinja_environment$0"
        },
        {
            "trigger": "jinja_loader\t flask.Flask",
            "contents": "jinja_loader$0"
        },
        {
            "trigger": "jinja_options = ImmutableDict({'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']})\t flask.Flask",
            "contents": "jinja_options = ImmutableDict(${1:\\{'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']\\}})$0"
        },
        {
            "trigger": "json_decoder\t flask.Flask",
            "contents": "json_decoder$0"
        },
        {
            "trigger": "json_encoder\t flask.Flask",
            "contents": "json_encoder$0"
        },
        {
            "trigger": "log_exception(exc_info)\t flask.Flask",
            "contents": "log_exception(${1:exc_info})$0"
        },
        {
            "trigger": "logger\t flask.Flask",
            "contents": "logger$0"
        },
        {
            "trigger": "make_config(instance_relative=False)\t flask.Flask",
            "contents": "make_config(${1:instance_relative=False})$0"
        },
        {
            "trigger": "make_default_options_response()\t flask.Flask",
            "contents": "make_default_options_response()$0"
        },
        {
            "trigger": "make_null_session()\t flask.Flask",
            "contents": "make_null_session()$0"
        },
        {
            "trigger": "make_response(rv)\t flask.Flask",
            "contents": "make_response(${1:rv})$0"
        },
        {
            "trigger": "str (unicode in Python 2)\t flask.Flask",
            "contents": "str (${1:unicode in Python 2})$0"
        },
        {
            "trigger": "bytes (str in Python 2)\t flask.Flask",
            "contents": "bytes (${1:str in Python 2})$0"
        },
        {
            "trigger": "tuple\t flask.Flask",
            "contents": "tuple$0"
        },
        {
            "trigger": "response_class\t flask.Flask",
            "contents": "response_class$0"
        },
        {
            "trigger": "other Response class\t flask.Flask",
            "contents": "other Response class$0"
        },
        {
            "trigger": "callable()\t flask.Flask",
            "contents": "callable()$0"
        },
        {
            "trigger": "make_shell_context()\t flask.Flask",
            "contents": "make_shell_context()$0"
        },
        {
            "trigger": "name\t flask.Flask",
            "contents": "name$0"
        },
        {
            "trigger": "open_instance_resource(resource, mode='rb')\t flask.Flask",
            "contents": "open_instance_resource(${1:resource}, ${2:mode='rb'})$0"
        },
        {
            "trigger": "open_resource(resource, mode='rb')\t flask.Flask",
            "contents": "open_resource(${1:resource}, ${2:mode='rb'})$0"
        },
        {
            "trigger": "open_session(request)\t flask.Flask",
            "contents": "open_session(${1:request})$0"
        },
        {
            "trigger": "permanent_session_lifetime\t flask.Flask",
            "contents": "permanent_session_lifetime$0"
        },
        {
            "trigger": "preprocess_request()\t flask.Flask",
            "contents": "preprocess_request()$0"
        },
        {
            "trigger": "preserve_context_on_exception\t flask.Flask",
            "contents": "preserve_context_on_exception$0"
        },
        {
            "trigger": "process_response(response)\t flask.Flask",
            "contents": "process_response(${1:response})$0"
        },
        {
            "trigger": "propagate_exceptions\t flask.Flask",
            "contents": "propagate_exceptions$0"
        },
        {
            "trigger": "register_blueprint(blueprint, **options)\t flask.Flask",
            "contents": "register_blueprint(${1:blueprint}, ${2:**options})$0"
        },
        {
            "trigger": "register_error_handler(code_or_exception, f)\t flask.Flask",
            "contents": "register_error_handler(${1:code_or_exception}, ${2:f})$0"
        },
        {
            "trigger": "request_class\t flask.Flask",
            "contents": "request_class$0"
        },
        {
            "trigger": "request_context(environ)\t flask.Flask",
            "contents": "request_context(${1:environ})$0"
        },
        {
            "trigger": "response_class\t flask.Flask",
            "contents": "response_class$0"
        },
        {
            "trigger": "root_path = None\t flask.Flask",
            "contents": "root_path = None$0"
        },
        {
            "trigger": "route(rule, **options)\t flask.Flask",
            "contents": "route(${1:rule}, ${2:**options})$0"
        },
        {
            "trigger": "run(host=None, port=None, debug=None, load_dotenv=True, **options)\t flask.Flask",
            "contents": "run(${1:host=None}, ${2:port=None}, ${3:debug=None}, ${4:load_dotenv=True}, ${5:**options})$0"
        },
        {
            "trigger": "save_session(session, response)\t flask.Flask",
            "contents": "save_session(${1:session}, ${2:response})$0"
        },
        {
            "trigger": "secret_key\t flask.Flask",
            "contents": "secret_key$0"
        },
        {
            "trigger": "select_jinja_autoescape(filename)\t flask.Flask",
            "contents": "select_jinja_autoescape(${1:filename})$0"
        },
        {
            "trigger": "send_file_max_age_default\t flask.Flask",
            "contents": "send_file_max_age_default$0"
        },
        {
            "trigger": "send_static_file(filename)\t flask.Flask",
            "contents": "send_static_file(${1:filename})$0"
        },
        {
            "trigger": "session_cookie_name\t flask.Flask",
            "contents": "session_cookie_name$0"
        },
        {
            "trigger": "session_interface = <flask.sessions.SecureCookieSessionInterface object>\t flask.Flask",
            "contents": "session_interface = <flask.sessions.SecureCookieSessionInterface object>$0"
        },
        {
            "trigger": "shell_context_processor(f)\t flask.Flask",
            "contents": "shell_context_processor(${1:f})$0"
        },
        {
            "trigger": "shell_context_processors = None\t flask.Flask",
            "contents": "shell_context_processors = None$0"
        },
        {
            "trigger": "should_ignore_error(error)\t flask.Flask",
            "contents": "should_ignore_error(${1:error})$0"
        },
        {
            "trigger": "static_folder\t flask.Flask",
            "contents": "static_folder$0"
        },
        {
            "trigger": "static_url_path\t flask.Flask",
            "contents": "static_url_path$0"
        },
        {
            "trigger": "teardown_appcontext(f)\t flask.Flask",
            "contents": "teardown_appcontext(${1:f})$0"
        },
        {
            "trigger": "teardown_appcontext_funcs = None\t flask.Flask",
            "contents": "teardown_appcontext_funcs = None$0"
        },
        {
            "trigger": "teardown_request(f)\t flask.Flask",
            "contents": "teardown_request(${1:f})$0"
        },
        {
            "trigger": "teardown_request_funcs = None\t flask.Flask",
            "contents": "teardown_request_funcs = None$0"
        },
        {
            "trigger": "template_context_processors = None\t flask.Flask",
            "contents": "template_context_processors = None$0"
        },
        {
            "trigger": "template_filter(name=None)\t flask.Flask",
            "contents": "template_filter(${1:name=None})$0"
        },
        {
            "trigger": "template_folder = None\t flask.Flask",
            "contents": "template_folder = None$0"
        },
        {
            "trigger": "template_global(name=None)\t flask.Flask",
            "contents": "template_global(${1:name=None})$0"
        },
        {
            "trigger": "template_test(name=None)\t flask.Flask",
            "contents": "template_test(${1:name=None})$0"
        },
        {
            "trigger": "templates_auto_reload\t flask.Flask",
            "contents": "templates_auto_reload$0"
        },
        {
            "trigger": "test_client(use_cookies=True, **kwargs)\t flask.Flask",
            "contents": "test_client(${1:use_cookies=True}, ${2:**kwargs})$0"
        },
        {
            "trigger": "test_client_= None\t flask.Flask",
            "contents": "test_client_= None$0"
        },
        {
            "trigger": "test_request_context(*args, **kwargs)\t flask.Flask",
            "contents": "test_request_context(${1:*args}, ${2:**kwargs})$0"
        },
        {
            "trigger": "testing\t flask.Flask",
            "contents": "testing$0"
        },
        {
            "trigger": "trap_http_exception(e)\t flask.Flask",
            "contents": "trap_http_exception(${1:e})$0"
        },
        {
            "trigger": "update_template_context(context)\t flask.Flask",
            "contents": "update_template_context(${1:context})$0"
        },
        {
            "trigger": "url_build_error_handlers = None\t flask.Flask",
            "contents": "url_build_error_handlers = None$0"
        },
        {
            "trigger": "url_default_functions = None\t flask.Flask",
            "contents": "url_default_functions = None$0"
        },
        {
            "trigger": "url_defaults(f)\t flask.Flask",
            "contents": "url_defaults(${1:f})$0"
        },
        {
            "trigger": "url_map = None\t flask.Flask",
            "contents": "url_map = None$0"
        },
        {
            "trigger": "url_rule_class\t flask.Flask",
            "contents": "url_rule_class$0"
        },
        {
            "trigger": "url_value_preprocessor(f)\t flask.Flask",
            "contents": "url_value_preprocessor(${1:f})$0"
        },
        {
            "trigger": "url_value_preprocessors = None\t flask.Flask",
            "contents": "url_value_preprocessors = None$0"
        },
        {
            "trigger": "use_x_sendfile\t flask.Flask",
            "contents": "use_x_sendfile$0"
        },
        {
            "trigger": "view_functions = None\t flask.Flask",
            "contents": "view_functions = None$0"
        },
        {
            "trigger": "wsgi_app(environ, start_response)\t flask.Flask",
            "contents": "wsgi_app(${1:environ}, ${2:start_response})$0"
        }
    ]
}